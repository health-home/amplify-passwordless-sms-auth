AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Passwordless SMS authentication backend using Amazon Cognito User Pools CUSTOM AUTH challenge flow w/ AWS Lambda triggers and Amazon SNS for sending SMS TOTP

Metadata:
  AWS::ServerlessRepo::Application:
    Name: amplify-passwordless-sms-auth 
    Description: >
      Passwordless SMS authentication backend using Amazon Cognito User Pools CUSTOM AUTH challenge flow w/ AWS Lambda triggers and Amazon SNS for sending SMS TOTP
    Author: Mobile Quickie
    SpdxLicenseId: MIT
    LicenseUrl: LICENSE
    ReadmeUrl: README.md
    Labels: ['passwordless', 'authentication', 'cognito', 'auth', 'sms', 'iOS', 'mobile', 'pinpoint', 'serverless', 'amplify']
    HomepageUrl: https://github.com/mobilequickie/amplify-passwordless-sms-auth
    SemanticVersion: 1.14.20
    SourceCodeUrl: https://github.com/mobilequickie/amplify-passwordless-sms-auth

Globals:
  Function:
    Timeout: 3

Parameters:
  UserPoolName:
    Type: String
    Description: The name you want the User Pool to be created with
  DomainName:
    Type: String
    Description: The Amazon Cognito domain

Resources:
  DefineAuthChallenge:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda-triggers/define-auth-challenge/
      Handler: define-auth-challenge.handler
      Runtime: nodejs12.x

  CreateAuthChallenge:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda-triggers/create-auth-challenge/
      Handler: create-auth-challenge.handler
      Runtime: nodejs12.x
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - mobiletargeting:*
                - sns:*
              Resource: "*"

  VerifyAuthChallengeResponse:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda-triggers/verify-auth-challenge-response/
      Handler: verify-auth-challenge-response.handler
      Runtime: nodejs12.x

  PreSignUp:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda-triggers/pre-sign-up/
      Handler: pre-sign-up.handler
      Runtime: nodejs12.x

  UserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      UserPoolName: !Ref UserPoolName
      Schema:
        - Name: platform
          AttributeDataType: String
          Mutable: true
          Required: false
      AliasAttributes:
        - phone_number
        - email
        - preferred_username
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
      MfaConfiguration: "OFF"
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
          - Name: verified_phone_number
            Priority: 2
      LambdaConfig:
        CreateAuthChallenge: !GetAtt CreateAuthChallenge.Arn
        DefineAuthChallenge: !GetAtt DefineAuthChallenge.Arn
        PreSignUp: !GetAtt PreSignUp.Arn
        VerifyAuthChallengeResponse: !GetAtt VerifyAuthChallengeResponse.Arn

  DefineAuthChallengeInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt DefineAuthChallenge.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn
  CreateAuthChallengeInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CreateAuthChallenge.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn
  VerifyAuthChallengeResponseInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt VerifyAuthChallengeResponse.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn
  PreSignUpInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PreSignUp.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  UserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: sms-auth-client
      GenerateSecret: false
      UserPoolId: !Ref UserPool
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_CUSTOM_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

  UserPoolDomain:
    Type: "AWS::Cognito::UserPoolDomain"
    Properties:
      Domain: !Ref DomainName
      UserPoolId:  !Ref UserPool

  PatientGroup:
    Type: "AWS::Cognito::UserPoolGroup"
    Properties:
      GroupName: Patient
      Description: Group for users with patient role
      UserPoolId:  !Ref UserPool

  CoachGroup:
    Type: "AWS::Cognito::UserPoolGroup"
    Properties:
      GroupName: Coach
      Description: Group for users with coach role
      UserPoolId:  !Ref UserPool

  DoctorGroup:
    Type: "AWS::Cognito::UserPoolGroup"
    Properties:
      GroupName: Doctor
      Description: Group for users with doctor role
      UserPoolId:  !Ref UserPool

  WeCareAdminGroup:
    Type: "AWS::Cognito::UserPoolGroup"
    Properties:
      GroupName: WeCareAdmin
      Description: Group for users with WeCare admin role
      UserPoolId:  !Ref UserPool

  ClinicAdminGroup:
    Type: "AWS::Cognito::UserPoolGroup"
    Properties:
      GroupName: ClinicAdmin
      Description: Group for users with clinic admin role
      UserPoolId:  !Ref UserPool

Outputs:
  UserPoolId:
    Description: ID of the User Pool
    Value: !Ref UserPool
  UserPoolClientId:
    Description: ID of the User Pool Client
    Value: !Ref UserPoolClient
